USING [
    CLASS ListInterface()
    INIT {
        PRINTLNS "This class represents an interface and must not be instantiated!"
        ERROR
    }
    [
        METHOD print() {
            PRINTLNS "I am a generic list"
        }

        METHOD insert(INT newel) RETURNS OBJ ListInterface if {
            PRINTLNS "I am an abstract method"
        }
    ]

    CLASS List(INT firstel)
    SUBCLASSOF ListInterface
    FIELDS INT element
           INT hasNext
           OBJ ListInterface next
    INIT {
        this.element := firstel
        this.hasNext := 0
    }
    [
        METHOD print() {
            PRINTI this.element
            IF this.hasNext = 1 THEN {
                PRINTS " -> "
                OBJ ListInterface mynext
                mynext := this.next
                CALL mynext.print()
            }
        }

        METHOD insert(INT newel) RETURNS OBJ List newhead {
            IF this.hasNext = 1 THEN {
                OBJ ListInterface next
                next := this.next
                this.next := next.insert(newel)
                newhead := this
            }
            IF this.hasNext = 0 THEN {
                this.hasNext := 1
                this.next := List(newel)
                newhead := this
            } 
        }
    ]

    CLASS Leaf(INT el)
    SUBCLASSOF ListInterface
    FIELDS INT element
    INIT {
        this.element := el
    }
    [
        METHOD print() {
            PRINTI this.element
            PRINTLNS ""
        }

        METHOD insert(INT newel) RETURNS OBJ List newHead {
            newHead := List(this.element)
            newHead := newHead.insert(newel)
        }
    ]
] DO {
    OBJ ListInterface head
    head := Leaf(1)

    CALL head.print()

    PRINTLNS "Will now insert a few elements into the list"

    INT i
    i := 2
    WHILE i < 300 DO {
        PRINTS "Inserting element "
        PRINTI i
        PRINTLNS " into the list!"
        head := head.insert(i)
        i := i + 1
    }

    CALL head.print()
}