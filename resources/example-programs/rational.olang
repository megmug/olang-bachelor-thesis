USING [
    CLASS Rational (INT numerator, INT denominator) 
    FIELDS INT numerator
           INT denominator
    INIT {
        IF denominator = 0 THEN {
            PRINTLNS "denominator cannot be zero!"
            ERROR
        }
        this.numerator := numerator
        this.denominator := denominator
    }
    [
        METHOD getNumerator() RETURNS INT num {
            num := this.numerator
        }

        METHOD getDenominator() RETURNS INT den {
            den := this.denominator
        }

        METHOD add(OBJ Rational summand) RETURNS OBJ Rational sum {
            INT newnum
            newnum := this.numerator * summand.getDenominator() + summand.getNumerator() * this.denominator
            INT newden
            newden := this.denominator * summand.getDenominator()
            sum := Rational(newnum, newden)
        }

        METHOD subtract(OBJ Rational subtrahend) RETURNS OBJ Rational difference {
            OBJ Rational addend
            addend := Rational(-subtrahend.getNumerator(), subtrahend.getDenominator())
            difference := this.add(addend)
        }

        METHOD multiply(OBJ Rational factor) RETURNS OBJ Rational product {
            INT newnum
            newnum := this.numerator * factor.getNumerator()
            INT newden
            newden := this.denominator * factor.getDenominator()
            product := Rational(newnum, newden)
        }

        METHOD divide(OBJ Rational divisor) RETURNS OBJ Rational quotient {
            OBJ Rational reciprocal
            reciprocal := Rational(divisor.getDenominator(), divisor.getNumerator())
            quotient := this.multiply(reciprocal)
        }

        METHOD isPositive() RETURNS INT isPositive {
            isPositive := 1
            IF this.numerator / this.denominator < 0 THEN isPositive := 0
        }

        METHOD isNatural() RETURNS INT isNatural {
            isNatural := 0
            IF this.isPositive() = 1 THEN {
                IF (this.numerator / this.denominator) * this.denominator = this.numerator THEN isNatural := 1
            }
        }

        METHOD simplify() RETURNS OBJ Rational simple
        USING [
            PROCEDURE gcd(INT a, INT b) RETURNS INT res {
                IF a < 0 THEN res := - gcd(-a, b)
                IF NOT a < 0 THEN {
                    IF b < 0 THEN res := - gcd(a, -b)
                    IF b = 0 THEN res := a
                    IF b > 0 THEN {
                        IF a = 0 THEN res := b
                        IF NOT a = 0 THEN {
                            IF a > b THEN res := gcd(a - b, b)
                            IF NOT a > b THEN res := gcd(a, b - a)
                        }
                    }
                }
            }
        ]
        {
            INT gcd
            gcd := gcd(this.numerator, this.denominator)
            simple := Rational(this.numerator / gcd, this.denominator / gcd)
        }

        METHOD compare(OBJ Rational other) RETURNS INT order {
            order := this.numerator * other.getDenominator() - other.getNumerator() * this.denominator
        }

        METHOD print() {
            PRINTI this.numerator
            PRINTS " / "
            PRINTI this.denominator
        }
    ]

    PROCEDURE readRational() RETURNS OBJ Rational rat {
        PRINTS "Please enter the numerator: "
        INT num
        READ num
        PRINTS "Please enter the denominator: "
        INT den
        READ den
        rat := Rational(num, den)
    }
] DO {
    PRINTLNS "This program prompts you to enter two rational numbers, and performs some calculations with them."
    PRINTLNS "*First number*"
    OBJ Rational fst
    fst := readRational()
    PRINTLNS "*Second number*"
    OBJ Rational snd
    snd := readRational()

    PRINTS "("
    CALL fst.print()
    PRINTS ") + ("
    CALL snd.print()
    PRINTS ") = "
    OBJ Rational sum
    sum := fst.add(snd)
    sum := sum.simplify()
    CALL sum.print()
    PRINTLNS ""

    PRINTS "("
    CALL fst.print()
    PRINTS ") - ("
    CALL snd.print()
    PRINTS ") = "
    OBJ Rational difference
    difference := fst.subtract(snd)
    difference := difference.simplify()
    CALL difference.print()
    PRINTLNS ""

    PRINTS "("
    CALL fst.print()
    PRINTS ") * ("
    CALL snd.print()
    PRINTS ") = "
    OBJ Rational product
    product := fst.multiply(snd)
    product := product.simplify()
    CALL product.print()
    PRINTLNS ""

    PRINTS "("
    CALL fst.print()
    PRINTS ") / ("
    CALL snd.print()
    PRINTS ") = "
    OBJ Rational quotient
    quotient := fst.divide(snd)
    quotient := quotient.simplify()
    CALL quotient.print()
    PRINTLNS ""
}