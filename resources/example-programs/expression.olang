USING [
    CLASS AExpression()
    INIT {
        PRINTLNS "ERROR: This is an interface"
        ERROR
    }
    [
        METHOD evaluate() RETURNS INT res {
            PRINTLNS "ERROR: This is an interface"
            ERROR
        }

        METHOD print() {
            PRINTLNS "ERROR: This is an interface"
            ERROR
        }
    ]

    CLASS UnaryAExpression()
    SUBCLASSOF AExpression
    FIELDS OBJ AExpression inner
    INIT {
        PRINTLNS "ERROR: This is an interface"
        ERROR
    }

    CLASS BinaryAExpression()
    SUBCLASSOF AExpression
    FIELDS OBJ AExpression left
           OBJ AExpression right
    INIT {
        PRINTLNS "ERROR: This is an interface"
        ERROR
    }

    CLASS Atom(INT number)
    SUBCLASSOF AExpression
    FIELDS INT number
    INIT {
        this.number := number
    }
    [
        METHOD evaluate() RETURNS INT num {
            num := this.number
        }

        METHOD print() {
            PRINTI this.number
        }
    ]

    CLASS Sum(OBJ AExpression left, OBJ AExpression right)
    SUBCLASSOF BinaryAExpression
    INIT {
        this.left := left
        this.right := right
    }
    [
        METHOD evaluate() RETURNS INT sum {
            OBJ AExpression left
            OBJ AExpression right
            left := this.left
            right := this.right
            sum := left.evaluate() + right.evaluate()
        }

        METHOD print() {
            OBJ AExpression left
            OBJ AExpression right
            left := this.left
            right := this.right

            PRINTS "("
            CALL left.print()
            PRINTS " + "
            CALL right.print()
            PRINTS ")"
        }
    ]

    CLASS Difference(OBJ AExpression left, OBJ AExpression right)
    SUBCLASSOF BinaryAExpression
    INIT {
        this.left := left
        this.right := right
    }
    [
        METHOD evaluate() RETURNS INT diff {
            OBJ AExpression left
            OBJ AExpression right
            left := this.left
            right := this.right
            diff := left.evaluate() - right.evaluate()
        }

        METHOD print() {
            OBJ AExpression left
            OBJ AExpression right
            left := this.left
            right := this.right

            PRINTS "("
            CALL left.print()
            PRINTS " - "
            CALL right.print()
            PRINTS ")"
        }
    ]

    CLASS Product(OBJ AExpression left, OBJ AExpression right)
    SUBCLASSOF BinaryAExpression
    INIT {
        this.left := left
        this.right := right
    }
    [
        METHOD evaluate() RETURNS INT product {
            OBJ AExpression left
            OBJ AExpression right
            left := this.left
            right := this.right
            product := left.evaluate() * right.evaluate()
        }

        METHOD print() {
            OBJ AExpression left
            OBJ AExpression right
            left := this.left
            right := this.right

            PRINTS "("
            CALL left.print()
            PRINTS " * "
            CALL right.print()
            PRINTS ")"
        }
    ]

    CLASS Quotient(OBJ AExpression dividend, OBJ AExpression divisor)
    SUBCLASSOF BinaryAExpression
    INIT {
        this.left := dividend
        this.right := divisor
    }
    [
        METHOD evaluate() RETURNS INT product {
            OBJ AExpression left
            OBJ AExpression right
            left := this.left
            right := this.right
            INT divisor
            divisor := right.evaluate()
            IF divisor = 0 THEN {
                PRINTLNS "ERROR: divisor must not be zero."
                ERROR
            }
            product := left.evaluate() / divisor
        }

        METHOD print() {
            OBJ AExpression left
            OBJ AExpression right
            left := this.left
            right := this.right

            PRINTS "("
            CALL left.print()
            PRINTS " / "
            CALL right.print()
            PRINTS ")"
        }
    ]

    CLASS Faculty(OBJ AExpression inner)
    SUBCLASSOF UnaryAExpression
    INIT {
        this.inner := inner
    }
    [
        METHOD evaluate()
        RETURNS INT faculty
        USING [
            PROCEDURE faculty(INT num) RETURNS INT faculty {
                IF num < 0 THEN {
                    PRINTLNS "ERROR: Undefined factorial"
                    ERROR
                }
                IF num = 0 THEN {
                    faculty := 1
                }
                IF num > 0 THEN {
                    faculty := num * faculty(num - 1)
                }
            }
        ] {
            OBJ AExpression inner
            inner := this.inner
            INT num
            num := inner.evaluate()
            faculty := faculty(num)
        }

        METHOD print() {
            OBJ AExpression inner
            inner := this.inner

            PRINTS "("
            CALL inner.print()
            PRINTS "!)"
        }
    ]

    CLASS Exponential(OBJ AExpression base, OBJ AExpression exponent)
    SUBCLASSOF BinaryAExpression
    INIT {
        this.left := base
        this.right := exponent
    }
    [
        METHOD evaluate()
        RETURNS INT exp
        USING [
            PROCEDURE exp(INT base, INT exponent) RETURNS INT exp {
                IF exponent < 0 THEN {
                    PRINTLNS "ERROR: Illegal exponent"
                    ERROR
                }
                IF base = 0 THEN {
                    exp := 0
                    IF exponent = 0 THEN {
                        exp := 1
                    }
                }
                IF NOT base = 0 THEN {
                    IF exponent = 0 THEN {
                        exp := 1
                    }
                    IF exponent > 0 THEN {
                        exp := base * exp(base, exponent - 1)
                    }
                }
            }
        ] {
            OBJ AExpression base
            base := this.left
            OBJ AExpression exponent
            exponent := this.right
            INT b
            b := base.evaluate()
            INT e
            e := exponent.evaluate()
            exp := exp(b, e)
        }

        METHOD print() {
            OBJ AExpression left
            OBJ AExpression right
            left := this.left
            right := this.right

            PRINTS "("
            CALL left.print()
            PRINTS "^"
            CALL right.print()
            PRINTS ")"
        }
    ]

] DO {
    OBJ AExpression exp
    exp := Product(Exponential(Faculty(Atom(3)), Exponential(Atom(3), Atom(3))), Quotient(Product(Atom(3), Atom(4)), Difference(Atom(9), Atom(7))))

    CALL exp.print()
    PRINTS " = "
    PRINTI exp.evaluate()
}