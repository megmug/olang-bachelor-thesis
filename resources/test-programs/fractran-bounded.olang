USING [
    CLASS Rational(INT numerator, INT denominator) 
    FIELDS INT numerator
           INT denominator
    INIT {
        IF denominator = 0 THEN {
            PRINTLNS "denominator cannot be zero!"
            ERROR
        }
        this.numerator := numerator
        this.denominator := denominator
    }
    [
        METHOD getNumerator() RETURNS INT num {
            num := this.numerator
        }

        METHOD getDenominator() RETURNS INT den {
            den := this.denominator
        }

        METHOD multiply(INT factor) RETURNS OBJ Rational product {
            product := Rational(factor * this.numerator, this.denominator)
        }

        METHOD isPositive() RETURNS INT isPositive {
            isPositive := 1
            IF this.numerator / this.denominator < 0 THEN isPositive := 0
        }

        METHOD isNatural() RETURNS INT isNatural {
            isNatural := 0
            IF this.isPositive() = 1 THEN {
                IF (this.numerator / this.denominator) * this.denominator = this.numerator THEN isNatural := 1
            }
        }

        METHOD print() {
            PRINTI this.numerator
            PRINTS " / "
            PRINTI this.denominator
        }
    ]

    CLASS RationalList()
    FIELDS INT hasHead
           OBJ Rational head
           INT hasNext
           OBJ RationalList next
    INIT {
        this.hasHead := 0
        this.hasNext := 0
    }
    [
        METHOD print() {
            IF this.hasHead = 1 THEN {
                OBJ Rational el
                el := this.head
                CALL el.print()
                PRINTS ", "
                IF this.hasNext = 1 THEN {
                    OBJ RationalList next
                    next := this.next
                    CALL next.print()
                }
            }
        }

        METHOD length() RETURNS INT len {
            len := 0
            IF this.hasHead = 1 THEN {
                len := 1
                IF this.hasNext = 1 THEN {
                    OBJ RationalList next
                    next := this.next
                    len := len + next.length()
                }
            }
        }

        METHOD insert(OBJ Rational element) {
            IF this.hasHead = 1 THEN {
                IF this.hasNext = 1 THEN {
                    OBJ RationalList next
                    next := this.next
                    CALL next.insert(element)
                }
                IF this.hasNext = 0 THEN {
                    OBJ RationalList newNext
                    newNext := RationalList()
                    CALL newNext.insert(element)
                    this.next := newNext
                    this.hasNext := 1
                }
            }
            IF this.hasHead = 0 THEN {
                this.head := element
                this.hasHead := 1
            }
        }

        METHOD get(INT i) RETURNS OBJ Rational res {
            IF i < 0 THEN {
                PRINTLNS "Index out of range!"
                ERROR
            }
            IF i = 0 THEN {
                IF this.hasHead = 0 THEN {
                    PRINTLNS "Index out of range!"
                    ERROR
                }
                IF this.hasHead = 1 THEN {
                    res := this.head
                }
            }
            IF i > 0 THEN {
                IF this.hasNext = 0 THEN {
                    PRINTLNS "Index out of range!"
                    ERROR
                }
                IF this.hasNext = 1 THEN {
                    OBJ RationalList next
                    next := this.next
                    res := next.get(i - 1)
                }
            }
        }
    ]

    PROCEDURE getPrimegameProgram() RETURNS OBJ RationalList prog {
        PRINTLNS "If started with input 2, PRIMEGAME computes all prime powers of 2 (among some other numbers which are not powers of 2)."
        prog := RationalList()
        CALL prog.insert(Rational(17, 91))
        CALL prog.insert(Rational(78, 85))
        CALL prog.insert(Rational(19, 51))
        CALL prog.insert(Rational(23, 38))
        CALL prog.insert(Rational(29, 33))
        CALL prog.insert(Rational(77, 29))
        CALL prog.insert(Rational(95, 23))
        CALL prog.insert(Rational(77, 19))
        CALL prog.insert(Rational(1, 17))
        CALL prog.insert(Rational(11, 13))
        CALL prog.insert(Rational(13, 11))
        CALL prog.insert(Rational(15, 2))
        CALL prog.insert(Rational(1, 7))
        CALL prog.insert(Rational(55, 1))
    }

    PROCEDURE getFibonacciProgram() RETURNS OBJ RationalList prog {
        PRINTLNS "The Fibonacci-Program computes the Fibonacci sequence f."
        PRINTLNS "Given  2 * 5 ^ (n - 1), it computes 2 ^ f(n)."
        prog := RationalList()
        CALL prog.insert(Rational(91, 33))
        CALL prog.insert(Rational(11, 13))
        CALL prog.insert(Rational(1, 11))
        CALL prog.insert(Rational(399, 34))
        CALL prog.insert(Rational(17, 19))
        CALL prog.insert(Rational(1, 17))
        CALL prog.insert(Rational(2, 7))
        CALL prog.insert(Rational(187, 5))
        CALL prog.insert(Rational(1, 3))
    }

    PROCEDURE getPolygameProgram() RETURNS OBJ RationalList prog {
        PRINTLNS "POLYGAME is a universal program - it 'enumerates' all computable functions using their respective 'catalogue numbers'."
        PRINTLNS "If c is the catalogue number of computable function f, and f(n) = m:"
        PRINTLNS "Given the number c * 2 ^ (2 ^ n), POLYGAME computes 2 ^ (2 ^ m)."
        prog := RationalList()
        CALL prog.insert(Rational(583, 559))
        CALL prog.insert(Rational(629, 551))
        CALL prog.insert(Rational(437, 527))
        CALL prog.insert(Rational(82, 517))
        CALL prog.insert(Rational(615, 329))
        CALL prog.insert(Rational(371, 129))
        CALL prog.insert(Rational(1, 115))
        CALL prog.insert(Rational(53, 86))
        CALL prog.insert(Rational(43, 53))
        CALL prog.insert(Rational(23, 47))
        CALL prog.insert(Rational(341, 46))
        CALL prog.insert(Rational(41, 43))
        CALL prog.insert(Rational(47, 41))
        CALL prog.insert(Rational(29, 37))
        CALL prog.insert(Rational(37, 31))
        CALL prog.insert(Rational(299, 29))
        CALL prog.insert(Rational(47, 23))
        CALL prog.insert(Rational(161, 15))
        CALL prog.insert(Rational(527, 19))
        CALL prog.insert(Rational(159, 7))
        CALL prog.insert(Rational(1, 17))
        CALL prog.insert(Rational(1, 13))
        CALL prog.insert(Rational(1, 3))
    }

    PROCEDURE getCustomProgram() RETURNS OBJ RationalList prog {
        PRINTLNS "You will be asked to enter each rational number, numerator and denominator separately."
        PRINTLNS "All rational numbers must be positive."
        PRINTLNS "To complete the input, enter a zero denominator."
        INT programComplete
        programComplete := 0
        INT counter
        counter := 0

        WHILE programComplete = 0 DO {
            INT den
            INT num

            PRINTS "Rational number "
            PRINTI counter
            PRINTLNS ": "
            PRINTLNS "Please enter the numerator: "
            READ num
            PRINTLNS "Please enter the denominator: "
            READ den

            IF den = 0 THEN {
                programComplete := 1
            }
            IF NOT den = 0 THEN {
                OBJ Rational newrat
                newrat := Rational(num, den)
                IF newrat.isPositive() = 0 THEN {
                    PRINTLNS "All rationals must be positive!"
                    ERROR
                }
                IF counter = 0 THEN {
                    prog := RationalList()
                    CALL prog.insert(newrat)
                }
                IF NOT counter = 0 THEN {
                    CALL prog.insert(newrat)
                }
                counter := counter + 1
            }
        }
        
        IF counter < 1 THEN {
            PRINTLNS "You entered an empty program!"
            ERROR
        }
    }
] DO {
    OBJ RationalList program
    INT programChoice

    PRINTLNS "Welcome to the FRACTRAN interpreter."
    PRINTLNS "Which program do you want to execute?"
    PRINTLNS "0: PRIMEGAME"
    PRINTLNS "1: Fibonacci"
    PRINTLNS "2: POLYGAME"
    PRINTLNS "3: Enter custom program interactively"
    READ programChoice
    IF programChoice < 0 THEN { 
        PRINTLNS "Invalid input!"
        ERROR
    }
    IF programChoice = 0 THEN program := getPrimegameProgram()
    IF programChoice = 1 THEN program := getFibonacciProgram()
    IF programChoice = 2 THEN program := getPolygameProgram()
    IF programChoice = 3 THEN program := getCustomProgram()
    IF programChoice > 3 THEN { 
        PRINTLNS "Invalid input!"
        ERROR
    }

    INT programLength
    programLength := program.length()

    INT input
    PRINTS "Input number: "
    READ input

    PRINTS "Program: "
    CALL program.print()
    PRINTLNS ""
    PRINTS "Input: "
    PRINTI input
    PRINTLNS ""
    PRINTLNS "Program output: "

    INT currentInput
    currentInput := input
    INT currentIndex
    currentIndex := 0

    INT steps
    steps := 0

    WHILE currentIndex < programLength DO {
        steps := steps + 1
        OBJ Rational currentFrac
        currentFrac := program.get(currentIndex)
        currentFrac := currentFrac.multiply(currentInput)
        INT isNatural
        isNatural := currentFrac.isNatural()
        IF isNatural = 1 THEN {
            currentInput := currentFrac.getNumerator() / currentFrac.getDenominator()
            currentIndex := 0
            PRINTI currentInput
            PRINTLNS ""
        }
        IF isNatural = 0 THEN {
            currentIndex := currentIndex + 1
        }
        IF steps > 100 THEN {
            currentIndex := programLength + 1
        }
    }
}